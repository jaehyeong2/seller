version: '3'
services:
  postgres_seller:
    image: postgres:15
    environment:
      POSTGRES_DB: seller_local
      POSTGRES_USER: seller_local
      POSTGRES_PASSWORD: seller_local
    ports:
      - "5432:5432"
    volumes:
      - postgres_seller_data:/var/lib/postgresql/data

  postgres_product:
    image: postgres:15
    environment:
      POSTGRES_DB: product_local
      POSTGRES_USER: product_local
      POSTGRES_PASSWORD: product_local
    ports:
      - "5433:5432"
    volumes:
      - postgres_product_data:/var/lib/postgresql/data

  postgres_order:
    image: postgres:15
    environment:
      POSTGRES_DB: order_local
      POSTGRES_USER: order_local
      POSTGRES_PASSWORD: order_local
    ports:
      - "5434:5432"
    volumes:
      - postgres_order_data:/var/lib/postgresql/data

  redis:
    image: redis:alpine
    command: redis-server --port 6379
    labels:
      - "name=redis"
      - "mode=standalone"
    ports:
      - 6379:6379

  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"


  kafka:
    container_name: kafka
    image: wurstmeister/kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9094:9094"
    environment:
      # 카프카 접속 가능한 URL 설정
      KAFKA_ADVERTISED_LISTENERS: INSIDE://:9092,OUTSIDE://localhost:9094

      # 카프카 서버의 내부 리스너, 0.0.0.0으로 설정해야 카프카 서버 내부 인스턴스 통신 가능
      # 0.0.0.0은 카프카 서버의 모든 인터페이스에서 수신이 가능하다.
      KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://0.0.0.0:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_CREATE_TOPICS: "test:1:1"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  postgres_seller_data:
  postgres_product_data:
  postgres_order_data:

